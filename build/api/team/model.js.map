{"version":3,"sources":["../../../src/api/team/model.js"],"names":["TeamSchema","Schema","name","type","String","required","es_indexed","code","founded","country","venue_name","venue_surface","venue_address","venue_city","venue_capacity","Number","updated","Date","now","updatedBy","timestamps","toJSON","virtuals","transform","obj","ret","_id","methods","view","full","createdAt","updatedAt","plugin","mongoosastic","index","host","process","env","ELASTICSEARCH_URL","port","ELASTICSEARCH_PORT","hydrate","hydrateOptions","lean","Team","mongoose","model","ObjectId","Types"],"mappings":"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","sourcesContent":["/**\n * @author Godfrey Ejeh\n * @description Creating  a team\n * @property {String} email admin's email account\n * @property {String} password admin's password\n *  */\n\nimport mongoose, { Schema } from \"mongoose\";\nimport mongoosastic from \"mongoosastic\";\n\nconst TeamSchema = new Schema(\n  {\n    name: {\n      type: String,\n      required: true,\n      es_indexed: true\n    },\n    code: { type: String, es_indexed: true },\n    founded: { type: String, es_indexed: true },\n    country: { type: String, es_indexed: true },\n    venue_name: { type: String, es_indexed: true },\n    venue_surface: { type: String, es_indexed: true },\n    venue_address: { type: String, es_indexed: true },\n    venue_city: { type: String, es_indexed: true },\n    venue_capacity: { type: Number, es_indexed: true },\n    updated: { type: Date, default: Date.now },\n    updatedBy: { type: String }\n  },\n  {\n    timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: (obj, ret) => {\n        delete ret._id;\n      }\n    }\n  }\n);\n\nTeamSchema.methods = {\n  view(full) {\n    const view = {\n      // simple view\n      name: this.name,\n      code: this.code,\n      founded: this.founded,\n      founded: this.country,\n      venue_capacity: this.venue_capacity,\n      venue_address: this.venue_address,\n      venue_city: this.venue_city,\n      venue_name: this.venue_name,\n      venue_surface: this.venue_surface,\n      updated: this.updated\n    };\n\n    return full\n      ? {\n          ...view,\n          createdAt: this.createdAt,\n          updatedAt: this.updatedAt,\n          updatedBy: this.updatedBy\n        }\n      : view;\n  }\n};\nTeamSchema.plugin(mongoosastic, {\n  index: \"teams\",\n  host: process.env.ELASTICSEARCH_URL,\n  port: process.env.ELASTICSEARCH_PORT,\n  hydrate: false,\n  hydrateOptions: {\n    lean: true\n  }\n});\n\nconst Team = mongoose.model(\"Team\", TeamSchema);\n\nexport const { ObjectId } = mongoose.Types;\nexport default Team;\n"],"file":"model.js"}