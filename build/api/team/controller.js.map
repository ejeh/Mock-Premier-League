{"version":3,"sources":["../../../src/api/team/controller.js"],"names":["search","req","res","query","q","index","body","esClient","from","size","multi_match","fields","fuzziness","_source","then","results","result","hits","map","source","err","message","create","session","key","data","locals","userId","userType","name","venue_name","venue_surface","venue_address","newObject","venue_city","venue_capacity","code","founded","country","record","Team","save","findAll","find","limit","sort","createdAt","select","findOne","recordId","params","teamId","ObjectId","isValid","findById","kind","update","updatedBy","updated","Date","now","findByIdAndUpdate","destroy","findByIdAndRemove"],"mappings":"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","sourcesContent":["import Team, { ObjectId } from \"../../api/team/model\";\nimport { success, fail, notFound } from \"../../services/responses\";\nimport esClient from \"../../services/elasticsearch\";\n\n// Find searched Teams\nexport async function search(req, res) {\n  const { q } = req.query || {};\n\n  if (!q) return fail(res, 422, `Why incorrect query string ${q}?`);\n  // let results;\n  const search = function search(index, body) {\n    return esClient.search({ index: index, body: body });\n  };\n  let body = {\n    from: 0,\n    size: 5,\n    query: {\n      multi_match: {\n        query: q,\n        fields: [\n          \"name\",\n          \"venue_name\",\n          \"venue_city\",\n          \"venue_address\",\n          \"country\"\n        ],\n        fuzziness: \"AUTO\"\n      }\n    },\n    _source: [\n      \"name\",\n      \"venue_name\",\n      \"venue_city\",\n      \"venue_address\",\n      \"venue_surface\",\n      \"country\",\n      \"founded\"\n    ]\n  };\n  search(\"teams\", body)\n    .then(async results => {\n      if (!results) {\n        return fail(res, 500, \"No search result found\");\n      }\n      const result = results.hits.hits.map(source => {\n        return source._source;\n      });\n      success(res, 200, result, \"retrieving record(s) was successfully!\");\n    })\n    .catch(err =>\n      fail(res, 500, `Error retrieving record(s).\\r\\n${err.message}`)\n    );\n}\n\n// Create a team\nexport function create(req, res) {\n  if (req.session.key) {\n    const data = req.body || {};\n    const { userId, userType } = res.locals;\n    if (!userId || !userType) {\n      return fail(res, 400, \"Invalid authentication credentials\");\n    }\n    if (userType !== \"admin\") {\n      return fail(\n        res,\n        422,\n        `Only admin are allowed to add products not ${userType}`\n      );\n    }\n    // Validate request\n    if (!data.name) {\n      return fail(\n        res,\n        422,\n        \"Team name can not be empty and must be alphanumeric.\"\n      );\n    }\n\n    if (!data.venue_name) {\n      return fail(\n        res,\n        422,\n        \"Team stadium name can not be empty and must be alphanumeric.\"\n      );\n    }\n    if (!data.venue_surface) {\n      return fail(\n        res,\n        422,\n        \"Team head coach can not be empty and must be alphanumeric.\"\n      );\n    }\n    if (!data.venue_address) {\n      return fail(\n        res,\n        422,\n        \"Team's nick name can not be empty and must be alphanumeric.\"\n      );\n    }\n\n    const newObject = {};\n\n    if (data.name) newObject.name = data.name;\n    if (data.venue_name) newObject.venue_name = data.venue_name;\n    if (data.venue_surface) newObject.venue_surface = data.venue_surface;\n    if (data.venue_address) newObject.venue_address = data.venue_address;\n    if (data.venue_city) newObject.venue_city = data.venue_city;\n    if (data.venue_capacity) newObject.venue_capacity = data.venue_capacity;\n    if (data.code) newObject.code = data.code;\n    if (data.founded) newObject.founded = data.founded;\n    if (data.country) newObject.country = data.country;\n\n    const record = new Team(newObject);\n\n    return record\n      .save()\n      .then(result => {\n        if (!result) {\n          return fail(res, 404, \"Error: not found newly created team\");\n        }\n        return success(\n          res,\n          200,\n          result,\n          \"New team record has been created successfully\"\n        );\n      })\n      .catch(err => {\n        return fail(res, 500, \"An error occured while trying to create a team\");\n      });\n  } else {\n    return fail(res, 500, \"Session timeout, please re-login\");\n  }\n}\n\n// / Retrieve and return all records from the database.\nexport function findAll(req, res) {\n  if (req.session.key) {\n    return Team.find()\n      .limit(20)\n      .sort({ createdAt: -1 })\n      .select({\n        // eslint-disable-next-line object-property-newline\n        name: true,\n        code: true,\n        founded: true,\n        country: true,\n        venue_capacity: true,\n        venue_address: true,\n        venue_city: true,\n        venue_name: true,\n        venue_surface: true\n      })\n      .then(result =>\n        success(res, 200, result, \"retrieving record(s) was successfully!\")\n      )\n      .catch(err =>\n        fail(res, 500, `Error retrieving record(s).\\r\\n${err.message}`)\n      );\n  } else {\n    return fail(res, 500, \"Session timeout, please re-login\");\n  }\n}\n\n// Retrieve a single record with a given teamId\nexport function findOne(req, res) {\n  if (req.session.key) {\n    let recordId = req.params.teamId || \"\";\n    const { userId, userType } = res.locals;\n    if (!userId || !userType)\n      return fail(res, 400, \"Invalid authentication credentials\");\n    if (!ObjectId.isValid(recordId))\n      return fail(res, 422, \"Invalid record Id as request parameter\");\n    return Team.findById(recordId)\n      .then(result => {\n        if (!result) return notFound(res, \"Error record not found.\");\n        return success(res, 200, result, \"retrieving record was successfully!\");\n      })\n      .catch(err => {\n        if (err.kind === \"ObjectId\") {\n          notFound(res, `Error retrieving record.\\r\\n${err.message}`);\n        }\n        return fail(res, 500, `Error retrieving record.\\r\\n${err.message}`);\n      });\n  } else {\n    return fail(res, 500, \"Session timeout, please re-login\");\n  }\n}\n// Update a team identified by the adminId in the request\nexport async function update(req, res) {\n  if (req.session.key) {\n    const teamId = req.params.teamId || \"\";\n    const data = req.body || {};\n    const { userId, userType } = res.locals;\n    if (!userId || !userType)\n      return fail(res, 400, \"Invalid authentication credentials\");\n    if (userType !== \"admin\")\n      return fail(\n        res,\n        422,\n        `Only Admins are allowed to update this record not ${userType}`\n      );\n    if (!data.name)\n      return fail(res, 422, \"You must provide an alphanumeric email address\");\n\n    const newObject = {};\n    newObject.updatedBy = userId;\n    newObject.updated = Date.now();\n    if (data.name) newObject.name = data.name;\n    if (data.venue_name) newObject.venue_name = data.venue_name;\n    if (data.venue_surface) newObject.venue_surface = data.venue_surface;\n    if (data.venue_address) newObject.venue_address = data.venue_address;\n    if (data.venue_city) newObject.venue_city = data.venue_city;\n    if (data.venue_capacity) newObject.venue_capacity = data.venue_capacity;\n    if (data.code) newObject.code = data.code;\n    if (data.founded) newObject.founded = data.founded;\n    if (data.country) newObject.country = data.country;\n\n    return Team.findByIdAndUpdate(teamId, newObject, { new: true })\n      .then(result => {\n        if (!result)\n          return notFound(\n            res,\n            `Error: newly submitted record not found with id ${userId}`\n          );\n        return success(\n          res,\n          200,\n          result,\n          \"Record has been created successfully!\"\n        );\n      })\n      .catch(err =>\n        fail(\n          res,\n          500,\n          `Error updating record with id ${userId}.\\r\\n${err.message}`\n        )\n      );\n  } else {\n    return fail(res, 500, \"Session timeout, please re-login\");\n  }\n}\n\n// Delete a team with the specified teamId in the request\nexport async function destroy(req, res) {\n  if (req.session.key) {\n    const recordId = req.params.teamId || \"\";\n    const { userType, userId } = res.locals;\n    if (!userId || !userType) {\n      return fail(res, 400, \"Invalid authentication credentials\");\n    }\n    if (!recordId) return fail(res, 400, \"No record Id as request parameter\");\n    if (userType !== \"admin\")\n      return fail(\n        res,\n        422,\n        `Only Admins are allowed to update this record not ${userType}`\n      );\n    if (!recordId)\n      return fail(res, 422, \"Invalid record Id as request parameter\");\n    return Team.findByIdAndRemove(recordId)\n      .then(record => {\n        if (!record)\n          return notFound(res, `Record not found with id ${recordId}`);\n        return success(res, 200, [], \"Record deleted successfully!\");\n      })\n      .catch(err => {\n        if (err.kind === \"ObjectId\" || err.name === \"NotFound\") {\n          return notFound(\n            res,\n            `Error: record not found with id ${recordId}\\r\\n${err.message}`\n          );\n        }\n        return fail(\n          res,\n          500,\n          `Error: could not delete record with id ${recordId}\\r\\n${err.message}`\n        );\n      });\n  } else {\n    return fail(res, 500, \"Session timeout, please re-login\");\n  }\n}\n"],"file":"controller.js"}