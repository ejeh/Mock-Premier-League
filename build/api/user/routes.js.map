{"version":3,"sources":["../../../src/api/user/routes.js"],"names":["router","express","Router","get","isValidUser","user","findOne","findAll","put","update","destroy"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;AAEA;;;;;;;;;;AAQAF,MAAM,CAACG,GAAP,CAAW,eAAX,EAA4BC,wBAA5B,EAAyCC,IAAI,CAACC,OAA9C;AAEA;;;;;;;;AAOAN,MAAM,CAACG,GAAP,CAAW,QAAX,EAAqBC,wBAArB,EAAkCC,IAAI,CAACE,OAAvC;AAEA;;;;;;;;;;;;;;;;;;AAkBAP,MAAM,CAACQ,GAAP,CAAW,OAAX,EAAoBJ,wBAApB,EAAiCC,IAAI,CAACI,MAAtC;AAEA;;;;;;;;;;;AAUAT,MAAM,UAAN,CAAc,eAAd,EAA+BI,wBAA/B,EAA4CC,IAAI,CAACK,OAAjD;eAEeV,M","sourcesContent":["import express from \"express\";\nimport * as user from \"./controller\";\nimport { isValidUser } from \"../../api/auth/controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /user/:adminId Retrieve admin\n * @apiName RetrieveAdmin\n * @apiGroup Admin\n * @apiSuccess {Object} user user's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 user not found.\n */\nrouter.get(\"/user/:userId\", isValidUser, user.findOne);\n\n/**\n * @api {get} /users Retrieve user\n * @apiName Retrieveuser\n * @apiGroup user\n * @apiSuccess {Object[]} rows List of user.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/users\", isValidUser, user.findAll);\n\n/**\n * @api {put} /user Update user\n * @apiName Updateuser\n * @apiGroup user\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiParam {String} firstName user's first name\n * @apiParam {String} lastName user's last name\n * @apiParam {String} email  user's email address\n * @apiParam {String} password  user's password\n * @apiParam {Date} updated update date\n * @apiParam {String} updatedBy  userID staff who updated the record\n * @apiSuccess {Object} user user's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 user not found.\n * @apiError 401 master access only.\n */\n\nrouter.put(\"/user\", isValidUser, user.update);\n\n/**\n * @api {delete} /user/:userId Delete user\n * @apiName Deleteuser\n * @apiGroup user\n * @apiPermission master\n * @apiParam  access_token master access token.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 user not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/user/:userId\", isValidUser, user.destroy);\n\nexport default router;\n"],"file":"routes.js"}