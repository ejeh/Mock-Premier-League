{"version":3,"sources":["../../../src/api/user/model.js"],"names":["UserSchema","Schema","email","type","String","lowercase","max","trim","required","password","firstName","lastName","updated","Date","now","updatedBy","timestamps","toJSON","virtuals","transform","obj","ret","_id","methods","view","full","createdAt","updatedAt","User","mongoose","model","ObjectId","Types"],"mappings":";;;;;;;;;;;;;AASA;;;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,gBAAJ,CACjB;AACEC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,SAAS,EAAE,IAFN;AAGLC,IAAAA,GAAG,EAAE,GAHA;AAILC,IAAAA,IAAI,EAAE,IAJD;AAKLC,IAAAA,QAAQ,EAAE;AALL,GADT;AAQEC,EAAAA,QAAQ,EAAE;AAAEN,IAAAA,IAAI,EAAEC,MAAR;AAAgBI,IAAAA,QAAQ,EAAE;AAA1B,GARZ;AASEE,EAAAA,SAAS,EAAE;AAAEP,IAAAA,IAAI,EAAEC;AAAR,GATb;AAUEO,EAAAA,QAAQ,EAAE;AAAER,IAAAA,IAAI,EAAEC;AAAR,GAVZ;AAWEQ,EAAAA,OAAO,EAAE;AAAET,IAAAA,IAAI,EAAEU,IAAR;AAAc,eAASA,IAAI,CAACC;AAA5B,GAXX;AAYEC,EAAAA,SAAS,EAAE;AAAEZ,IAAAA,IAAI,EAAEC;AAAR;AAZb,CADiB,EAejB;AACEY,EAAAA,UAAU,EAAE,IADd;AAEEC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,IADJ;AAENC,IAAAA,SAAS,EAAE,mBAACC,GAAD,EAAMC,GAAN,EAAc;AACvB,aAAOA,GAAG,CAACC,GAAX;AACD;AAJK;AAFV,CAfiB,CAAnB;AA0BAtB,UAAU,CAACuB,OAAX,GAAqB;AACnBC,EAAAA,IADmB,gBACdC,IADc,EACR;AACT,QAAMD,IAAI,GAAG;AACX;AACAd,MAAAA,SAAS,EAAE,KAAKA,SAFL;AAGXC,MAAAA,QAAQ,EAAE,KAAKA,QAHJ;AAIXT,MAAAA,KAAK,EAAE,KAAKA,KAJD;AAKXU,MAAAA,OAAO,EAAE,KAAKA;AALH,KAAb;AAQA,WAAOa,IAAI,qBAEFD,IAFE;AAGLE,MAAAA,SAAS,EAAE,KAAKA,SAHX;AAILC,MAAAA,SAAS,EAAE,KAAKA,SAJX;AAKLZ,MAAAA,SAAS,EAAE,KAAKA;AALX,SAOPS,IAPJ;AAQD;AAlBkB,CAArB;;AAoBA,IAAMI,IAAI,GAAGC,qBAASC,KAAT,CAAe,MAAf,EAAuB9B,UAAvB,CAAb;;IAEe+B,Q,GAAaF,qBAASG,K,CAAtBD,Q;;eACAH,I","sourcesContent":["/**\n * @author Godfrey Ejeh\n * @description Creating the user account\n * @property {String} email user's email account\n * @property {String} password user's password\n * @property {String} firstName user's first name\n * @property {String} lastName user's last name\n *  */\n\nimport mongoose, { Schema } from \"mongoose\";\n\nconst UserSchema = new Schema(\n  {\n    email: {\n      type: String,\n      lowercase: true,\n      max: 100,\n      trim: true,\n      required: true\n    },\n    password: { type: String, required: true },\n    firstName: { type: String },\n    lastName: { type: String },\n    updated: { type: Date, default: Date.now },\n    updatedBy: { type: String }\n  },\n  {\n    timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: (obj, ret) => {\n        delete ret._id;\n      }\n    }\n  }\n);\n\nUserSchema.methods = {\n  view(full) {\n    const view = {\n      // simple view\n      firstName: this.firstName,\n      lastName: this.lastName,\n      email: this.email,\n      updated: this.updated\n    };\n\n    return full\n      ? {\n          ...view,\n          createdAt: this.createdAt,\n          updatedAt: this.updatedAt,\n          updatedBy: this.updatedBy\n        }\n      : view;\n  }\n};\nconst User = mongoose.model(\"User\", UserSchema);\n\nexport const { ObjectId } = mongoose.Types;\nexport default User;\n"],"file":"model.js"}