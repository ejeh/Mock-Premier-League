{"version":3,"sources":["../../../src/api/auth/controller.js"],"names":["getUserModel","userType","user","Admin","User","isValidAdmin","req","res","next","accessToken","filter","params","jwt","verify","jwtSecret","payload","id","email","findOne","select","firstName","lastName","exec","then","admin","locals","userId","userEmail","error","isValidUser","emailSignup","body","password","message","hash","newUser","save","saved","err","emailLogin","session","key","match","result","currentUser","Promise","resolve","reject","sign","expiresIn","token","encrypted"],"mappings":"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","sourcesContent":["import Admin from \"../../api/admin/model\";\nimport User from \"../../api/user/model\";\nimport { success, fail, notFound } from \"../../services/responses\";\nimport {\n  comparePasswords,\n  hashPassword,\n  findEmail\n} from \"../../services/helpers\";\nimport jwt from \"jsonwebtoken\";\nimport { jwtSecret, encrypt, getToken } from \"../../services/jwt\";\n\nexport const getUserModel = userType => {\n  let user = null;\n  switch (userType) {\n    case \"admin\":\n      user = Admin;\n      break;\n    case \"user\":\n      user = User;\n      break;\n    default:\n      user = null;\n  }\n  return user;\n};\n\n// Authorize to access admin protected route\nexport function isValidAdmin(req, res, next) {\n  const accessToken = getToken(req);\n  let filter;\n  if (!req.params) {\n    return fail(res, 403, \"Authentication failed: Invalid request parameters.\");\n  }\n  if (!accessToken) {\n    return fail(res, 403, \"Authencation faied: Undefined token.\");\n  }\n  try {\n    const {\n      payload: { id, email }\n    } = jwt.verify(accessToken, jwtSecret);\n    if (email) {\n      filter = { email };\n    }\n    return Admin.findOne(filter)\n      .select({ email: true, firstName: true, lastName: true })\n      .exec()\n      .then(admin => {\n        if (!admin) {\n          return notFound(\n            res,\n            `Admin with email ${email} not found in database`\n          );\n        }\n        res.locals.userId = id;\n        res.locals.userType = \"admin\";\n        res.locals.userEmail = email;\n        return next();\n      });\n  } catch (error) {\n    return fail(res, 401, \"Admin verication failed, please login\");\n  }\n}\n\n// / Authorize to access user protected route\nexport function isValidUser(req, res, next) {\n  const accessToken = getToken(req);\n  let filter;\n  if (!req.params) {\n    return fail(res, 403, \"Authentication failed: Invalid request parameters.\");\n  }\n  if (!accessToken) {\n    return fail(res, 403, \"Authencation faied: Undefined token.\");\n  }\n  try {\n    const {\n      payload: { id, email }\n    } = jwt.verify(accessToken, jwtSecret);\n    if (email) {\n      filter = { email };\n    }\n    return User.findOne(filter)\n      .select({ email: true, firstName: true, lastName: true })\n      .exec()\n      .then(user => {\n        if (!user) {\n          return notFound(\n            res,\n            `Admin with email ${email} not found in database`\n          );\n        }\n        res.locals.userId = id;\n        res.locals.userType = \"user\";\n        res.locals.userEmail = email;\n        return next();\n      });\n  } catch (error) {\n    return fail(res, 401, \"Admin verication failed, please login\");\n  }\n}\n\n// Sigup admin route\nexport async function emailSignup(req, res, next) {\n  const { email, password } = req.body;\n  const { userType } = req.params;\n  if (!email || !password) {\n    return fail(res, 401, \"Request should have an Email and Password\");\n  }\n  if (!req.params) {\n    return fail(res, 403, \"Authentication Failed: invalid request parameters.\");\n  }\n  const User = getUserModel(userType);\n  if (!User) return fail(res, 401, \"Unknown user type!\");\n\n  let user;\n\n  try {\n    user = (await findEmail(User, email)) || {};\n  } catch (err) {\n    return fail(\n      res,\n      500,\n      `Error finding user with email ${email}. ${err.message}`\n    );\n  }\n\n  if (user && email === user.email) {\n    return fail(res, 500, `User with email already exist. ${email}`);\n  }\n\n  return hashPassword(password)\n    .then(hash => {\n      const newUser = new User({\n        email: req.body.email,\n        password: hash\n      });\n      return newUser\n        .save()\n        .then(saved =>\n          success(res, 200, saved, \"new User record has been created\")\n        )\n        .catch(err => fail(res, 500, `Error creating user. ${err}`));\n    })\n    .catch(err =>\n      fail(res, 500, `Error encrypting user password. ${err.message}`)\n    );\n}\n\n// Login admin route\nexport async function emailLogin(req, res) {\n  req.session.key = req.body.email;\n  const { email, password } = req.body;\n  const { userType } = req.params;\n  if (!userType) {\n    return fail(res, 403, \"Authentication Failed: invalid request parameters.\");\n  }\n  if (!email || !password) {\n    return fail(res, 401, \"Request should have an Email and Password\");\n  }\n  const User = getUserModel(userType);\n  if (!User) return fail(res, 401, \"Unknown user type!\");\n  let currentUser;\n  let user;\n  try {\n    user = (await findEmail(User, email)) || {};\n  } catch (err) {\n    return fail(\n      res,\n      500,\n      `Error finding user with email ${email}. ${err.message}`\n    );\n  }\n  if (!user.email) {\n    return fail(res, 500, `Could not find user with email ${email}`);\n  }\n  const match = await comparePasswords(password, user.password);\n  // //////////////////////////////////////////////////\n  // Step 4: Create JWT\n  // //////////////////////////////////////////////////\n  if (match) {\n    return user\n      .save()\n      .then(result => {\n        currentUser = result;\n        return new Promise((resolve, reject) => {\n          jwt.sign(\n            {\n              payload: {\n                id: result.id,\n                email\n              }\n            },\n            jwtSecret,\n            { expiresIn: 3000 },\n            (err, token) => {\n              if (err) reject(err);\n              resolve(token);\n            }\n          );\n        });\n      })\n      .then(accessToken => {\n        try {\n          const encrypted = encrypt(accessToken);\n          success(\n            res,\n            200,\n            { accessToken: encrypted, id: currentUser.id },\n            \"Authentication successful!\"\n          );\n        } catch (err) {\n          fail(res, 401, \"Unable to generate an access token\");\n        }\n      })\n      .catch(err => {\n        fail(res, 500, \"Unable to authenticate user\", err);\n      });\n  }\n  return fail(res, 403, \"Authentication Failed: invalid credentials.\");\n}\n"],"file":"controller.js"}