{"version":3,"sources":["../../../src/api/admin/controller.js"],"names":["findOne","req","res","session","key","recordId","params","adminId","locals","userId","userType","ObjectId","isValid","Admin","findById","then","result","err","kind","message","findAll","find","limit","sort","createdAt","select","email","firstName","lastName","update","data","body","userEmail","record","newObject","updatedBy","updated","Date","now","toLowerCase","password","helper","hashPassword","findByIdAndUpdate","destroy","findByIdAndRemove","name"],"mappings":"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","sourcesContent":["import Admin, { ObjectId } from \"./model\";\nimport { success, fail, notFound } from \"../../services/responses\";\nimport * as helper from \"../../services/helpers\";\n\n// Retrieve a single record with a given adminId\nexport function findOne(req, res) {\n  if (req.session.key) {\n    let recordId = req.params.adminId || \"\";\n    const { userId, userType } = res.locals;\n    if (!userId || !userType)\n      return fail(res, 400, \"Invalid authentication credentials\");\n    if (userType !== \"admin\")\n      return fail(\n        res,\n        422,\n        `Only Admins are allowed to update this record not ${userType}`\n      );\n    if (!recordId) recordId = userId;\n    if (!ObjectId.isValid(recordId))\n      return fail(res, 422, \"Invalid record Id as request parameter\");\n    return Admin.findById(recordId)\n      .then(result => {\n        if (!result) return notFound(res, \"Error record not found.\");\n        return success(res, 200, result, \"retrieving record was successfully!\");\n      })\n      .catch(err => {\n        if (err.kind === \"ObjectId\") {\n          notFound(res, `Error retrieving record.\\r\\n${err.message}`);\n        }\n        return fail(res, 500, `Error retrieving record.\\r\\n${err.message}`);\n      });\n  } else {\n    return fail(res, 401, \"Session timeout, please re-login\");\n  }\n}\n\n// / Retrieve and return all records from the database.\nexport function findAll(req, res) {\n  if (req.session.key) {\n    return Admin.find()\n      .limit(4)\n      .sort({ createdAt: -1 })\n      .select({\n        // eslint-disable-next-line object-property-newline\n        email: true,\n        firstName: true,\n        lastName: true\n      })\n      .then(result =>\n        success(res, 200, result, \"retrieving record(s) was successfully!\")\n      )\n      .catch(err =>\n        fail(res, 500, `Error retrieving record(s).\\r\\n${err.message}`)\n      );\n  } else {\n    return fail(res, 401, \"Session timeout, please re-login\");\n  }\n}\n\n// Update a admin\nexport async function update(req, res) {\n  if (req.session.key) {\n    const data = req.body || {};\n    const { userId, userType, userEmail } = res.locals;\n    if (!userId || !userType)\n      return fail(res, 400, \"Invalid authentication credentials\");\n    if (userType !== \"admin\")\n      return fail(\n        res,\n        422,\n        `Only Admins are allowed to update this record not ${userType}`\n      );\n    if (!userEmail && !data.email)\n      return fail(res, 422, \"You must provide an alphanumeric email address\");\n\n    let record = {};\n    try {\n      record = await Admin.findById(userId);\n    } catch (err) {\n      return fail(res, 422, \"Error fetching Admin information\");\n    }\n    if (!record) return notFound(res, \"Admin not found\");\n\n    const newObject = {};\n    newObject.updatedBy = userId;\n    newObject.updated = Date.now();\n    if (data.firstName) newObject.firstName = data.firstName;\n    if (data.lastName) newObject.lastName = data.lastName;\n    if (!userEmail) newObject.email = data.email.toLowerCase();\n    if (data.password)\n      newObject.password = await helper.hashPassword(data.password);\n\n    return Admin.findByIdAndUpdate(userId, newObject, { new: true })\n      .then(result => {\n        if (!result)\n          return notFound(\n            res,\n            `Error: newly submitted record not found with id ${userId}`\n          );\n        return success(\n          res,\n          200,\n          result,\n          \"Record has been created successfully!\"\n        );\n      })\n      .catch(err =>\n        fail(\n          res,\n          500,\n          `Error updating record with id ${userId}.\\r\\n${err.message}`\n        )\n      );\n  } else {\n    return fail(res, 401, \"Session timeout, please re-login\");\n  }\n}\n\n// Delete a admin with the specified adminId in the request\nexport async function destroy(req, res) {\n  if (req.session.key) {\n    const recordId = req.params.adminId || \"\";\n    if (!recordId) return fail(res, 400, \"No record Id as request parameter\");\n    if (!ObjectId.isValid(recordId))\n      return fail(res, 422, \"Invalid record Id as request parameter\");\n\n    const { userId, userType } = res.locals;\n    if (!userId || !userType)\n      return fail(res, 400, \"Invalid authentication credentials\");\n\n    if (userType === \"admin\" && recordId === userId) {\n      // we are cool!\n    } else {\n      return fail(\n        res,\n        422,\n        `Only Admin is allowed to delete this record not ${userType}`\n      );\n    }\n    return Admin.findByIdAndRemove(recordId)\n      .then(record => {\n        if (!record)\n          return notFound(res, `Record not found with id ${recordId}`);\n        return success(res, 200, [], \"Record deleted successfully!\");\n      })\n      .catch(err => {\n        if (err.kind === \"ObjectId\" || err.name === \"NotFound\") {\n          return notFound(\n            res,\n            `Error: record not found with id ${recordId}\\r\\n${err.message}`\n          );\n        }\n        return fail(\n          res,\n          500,\n          `Error: could not delete record with id ${recordId}\\r\\n${err.message}`\n        );\n      });\n  } else {\n    return fail(res, 401, \"Session timeout, please re-login\");\n  }\n}\n"],"file":"controller.js"}