{"version":3,"sources":["../src/app.js"],"names":["redisClient","redis","createClient","redisStore","require","session","dotenv","config","app","on","err","console","log","use","secret","name","resave","saveUninitialized","cookie","secure","store","host","port","client","ttl","bodyParser","urlencoded","extended","limit","json","express","path","join","__dirname","database","process","env","DB_HOST","mongoose","Promise","global","connect","useNewUrlParser","reconnectTries","Number","MAX_SAFE_INTEGER","reconnectInterval","poolSize","socketTimeoutMS","autoReconnect","then","exit","set","get","req","res","message","next","locals","userId","userType","role","api","error","Error","status"],"mappings":"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","sourcesContent":["// import dependencies\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport morgan from \"morgan\";\nimport mongoose from \"mongoose\";\nimport dotenv from \"dotenv\";\nimport path from \"path\";\n\nimport session from \"express-session\";\nimport redis from \"redis\";\nconst redisClient = redis.createClient();\n// host: \"redis\"\nconst redisStore = require(\"connect-redis\")(session);\n\n// import routes\nimport api from \"./api\";\n\ndotenv.config();\n\nconst app = express();\nredisClient.on(\"error\", err => {\n  console.log(\"Redis error: \", err);\n});\n\n// Start a session; we use Redis for the session store.\n// \"secret\" will be used to create the session ID hash (the cookie id and the redis key value)\n// \"name\" will show up as your cookie name in the browser\n// \"cookie\" is provided by default; you can add it to add additional personalized options\n// The \"store\" ttl is the expiration time for each Redis session ID, in seconds\napp.use(\n  session({\n    secret: \"ThisIsHowYouUseRedisSessionStorage\",\n    name: \"_redis\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: { secure: false }, // Note that the cookie-parser module is no longer needed\n    store: new redisStore({\n      host: \"localhost\",\n      port: 6379,\n      client: redisClient,\n      ttl: 2000\n    })\n  })\n);\n\n// app.use(cookieParser());\n// app.use(helmet());\napp.use(bodyParser.urlencoded({ extended: true, limit: \"10mb\" }));\napp.use(bodyParser.json({ limit: \"10mb\" }));\napp.use(morgan(\"dev\"));\n\napp.use(express.static(path.join(__dirname, \"../public\")));\n\nconst database = process.env.DB_HOST;\n\n// Configuring the database\nmongoose.Promise = global.Promise;\n\n// Connecting to the database\nmongoose\n  .connect(database, {\n    useNewUrlParser: true,\n    reconnectTries: Number.MAX_SAFE_INTEGER,\n    reconnectInterval: 1000,\n    poolSize: 5,\n    socketTimeoutMS: 45000,\n    autoReconnect: true\n  })\n  .then(() => {\n    console.log(\"Successfully connected to the database!\");\n  })\n  .catch(err => {\n    console.log(err, \"Could not connect to the database. Exiting now...\");\n    process.exit();\n  });\n\nmongoose.set(\"useFindAndModify\", false);\nmongoose.set(\"useCreateIndex\", true);\n\n// define a simple route\napp.get(\"/\", (req, res) => {\n  res.json({ message: \"Welcome to Mock Premier Fixtures.\" });\n});\n\n// modify request object\napp.use((req, res, next) => {\n  res.locals.userId = 0.0;\n  res.locals.userType = \"anonymous\";\n  res.locals.role = \"\";\n  next();\n});\n\n// Use Routes\napp.use(\"/api/v1\", api);\n\napp.use((req, res, next) => {\n  const error = new Error(\"Not found!\");\n  error.status = 404;\n  next(error);\n});\n\napp.use((error, req, res, next) => {\n  res.status(error.status || 500);\n  res.json({\n    error: {\n      message: `Mock premier league API says ${error.message}`\n    }\n  });\n  next();\n});\n\nexport default app;\n"],"file":"app.js"}